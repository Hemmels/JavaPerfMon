plugins {
	id 'java'
	id 'eclipse'
	id 'application'
	id 'io.freefair.lombok'
}

repositories {
	jcenter()
	maven {
		url 'https://plugins.gradle.org/m2/'
	}
	mavenLocal()
	mavenCentral()
}
	
group = 'com.hemmels'
version = '1.0'
sourceCompatibility = 11

dependencies {
	api project(':JavaPerfMonGen')
	// Used for @Data
	implementation 'org.projectlombok:lombok'
	
	// Spring boot
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation ('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	
	// Imports we use in the application codebase
	// https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
	implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation group: 'commons-io', name: 'commons-io', version: '2.7'

	// Database drivers here
	// https://mvnrepository.com/artifact/com.h2database/h2
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'

	// Testing
	// Spring 5 non-blocking web client
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		// Excludes because we'll use Junit 5 (Jupiter) below
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		exclude group: 'junit', module: 'junit'
	}

}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

eclipse {
	project {
		buildCommands.clear();
		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		buildCommand 'org.jboss.tools.jst.web.kb.kbbuilder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
	}
}

application {
	mainClassName = 'com.hemmels.javaperfmon.application.Application'
}

bootRun {
	main = 'com.hemmels.javaperfmon.application.Application'
}